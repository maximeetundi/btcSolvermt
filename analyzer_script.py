#!/usr/bin/env python3
"""
Analyseur de Performance pour Bitcoin Puzzle Solver
Analyse les logs, g√©n√®re des statistiques et des graphiques
"""

import re
import json
import datetime
import matplotlib.pyplot as plt
import pandas as pd
from pathlib import Path
import argparse
import sys

class PuzzleSolverAnalyzer:
    def __init__(self):
        self.stats_data = []
        self.found_keys = []
        
    def parse_log_file(self, log_file):
        """Parse les logs du solveur"""
        print(f"üìä Analyse du fichier: {log_file}")
        
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                content = f.read()
        except FileNotFoundError:
            print(f"‚ùå Fichier non trouv√©: {log_file}")
            return False
            
        # Regex pour extraire les statistiques
        stats_pattern = r'\[Stats\] Total: (\d+) \| Vitesse: ([\d.]+) cl√©s/s \| Instantan√©: ([\d.]+) cl√©s/s \| Temps: (\d+):(\d+):(\d+) \| C≈ìurs: (\d+)'
        found_pattern = r'üí∞ ADRESSE TROUV√âE ! üí∞.*?üîç Adresse: ([^\n]+).*?üîë Cl√© Priv√©e \(WIF\): ([^\n]+).*?üî¢ Nombre D√©cimal: ([^\n]+)'
        
        # Extraire les statistiques
        stats_matches = re.findall(stats_pattern, content)
        for match in stats_matches:
            total, avg_speed, instant_speed, hours, minutes, seconds, cores = match
            total_seconds = int(hours) * 3600 + int(minutes) * 60 + int(seconds)
            
            self.stats_data.append({
                'timestamp': datetime.datetime.now() - datetime.timedelta(seconds=len(self.stats_data)*10),
                'total_keys': int(total),
                'avg_speed': float(avg_speed),
                'instant_speed': float(instant_speed),
                'elapsed_seconds': total_seconds,
                'cores': int(cores)
            })
        
        # Extraire les cl√©s trouv√©es
        found_matches = re.findall(found_pattern, content, re.DOTALL)
        for match in found_matches:
            address, wif, decimal = match
            self.found_keys.append({
                'address': address.strip(),
                'wif': wif.strip(),
                'decimal': decimal.strip(),
                'timestamp': datetime.datetime.now()
            })
        
        print(f"‚úÖ Trouv√© {len(self.stats_data)} entr√©es de statistiques")
        print(f"‚úÖ Trouv√© {len(self.found_keys)} cl√©s r√©solues")
        return True
    
    def generate_statistics(self):
        """G√©n√®re des statistiques d√©taill√©es"""
        if not self.stats_data:
            print("‚ùå Aucune donn√©e statistique disponible")
            return
        
        df = pd.DataFrame(self.stats_data)
        
        print("\nüìà STATISTIQUES G√âN√âRALES")
        print("=" * 50)
        print(f"Nombre total de cl√©s test√©es: {df['total_keys'].max():,}")
        print(f"Vitesse moyenne: {df['avg_speed'].mean():.2f} cl√©s/s")
        print(f"Vitesse maximale: {df['avg_speed'].max():.2f} cl√©s/s")
        print(f"Vitesse minimale: {df['avg_speed'].min():.2f} cl√©s/s")
        print(f"Temps total d'ex√©cution: {df['elapsed_seconds'].max()} secondes")
        print(f"Nombre de c≈ìurs utilis√©s: {df['cores'].iloc[-1] if len(df) > 0 else 'N/A'}")
        
        # Estimation du temps pour r√©soudre diff√©rents puzzles
        avg_speed = df['avg_speed'].mean()
        print(f"\n‚è±Ô∏è  ESTIMATIONS TEMPORELLES (√† {avg_speed:.0f} cl√©s/s)")
        print("=" * 50)
        
        puzzles = [
            (64, 2**63, 2**64-1),
            (66, 2**65, 2**66-1),
            (68, 2**67, 2**68-1),
            (70, 2**69, 2**70-1),
        ]
        
        for puzzle_num, start, end in puzzles:
            total_keys = end - start + 1
            time_seconds = total_keys / (avg_speed * 2)  # Estimation probabiliste
            
            if time_seconds < 3600:
                time_str = f"{time_seconds/60:.1f} minutes"
            elif time_seconds < 86400:
                time_str = f"{time_seconds/3600:.1f} heures"
            elif time_seconds < 31536000:
                time_str = f"{time_seconds/86400:.1f} jours"
            else:
                time_str = f"{time_seconds/31536000:.1f} ann√©es"
            
            print(f"Puzzle {puzzle_num}: ~{time_str} (espace: 2^{puzzle_num-1} cl√©s)")
        
        return df
    
    def create_performance_graph(self, df, output_file="performance.png"):
        """Cr√©e un graphique de performance"""
        if df.empty:
            print("‚ùå Pas de donn√©es pour le graphique")
            return
        
        plt.figure(figsize=(12, 8))
        
        # Graphique de vitesse dans le temps
        plt.subplot(2, 2, 1)
        plt.plot(df.index, df['avg_speed'], label='Vitesse moyenne', color='blue')
        plt.plot(df.index, df['instant_speed'], label='Vitesse instantan√©e', color='red', alpha=0.7)
        plt.title('Vitesse de Recherche')
        plt.xlabel('Temps (√©chantillons)')
        plt.ylabel('Cl√©s/seconde')
        plt.legend()
        plt.grid(True)
        
        # Graphique cumulatif des cl√©s test√©es
        plt.subplot(2, 2, 2)
        plt.plot(df.index, df['total_keys'], color='green')
        plt.title('Cl√©s Test√©es (Cumulatif)')
        plt.xlabel('Temps (√©chantillons)')
        plt.ylabel('Nombre de cl√©s')
        plt.grid(True)
        
        # Histogramme des vitesses
        plt.subplot(2, 2, 3)
        plt.hist(df['avg_speed'], bins=20, alpha=0.7, color='purple')
        plt.title('Distribution des Vitesses')
        plt.xlabel('Cl√©s/seconde')
        plt.ylabel('Fr√©quence')
        plt.grid(True)
        
        # Efficacit√© par c≈ìur
        plt.subplot(2, 2, 4)
        efficiency = df['avg_speed'] / df['cores']
        plt.plot(df.index, efficiency, color='orange')
        plt.title('Efficacit√© par C≈ìur')
        plt.xlabel('Temps (√©chantillons)')
        plt.ylabel('Cl√©s/seconde/c≈ìur')
        plt.grid(True)
        
        plt.tight_layout()
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"üìä Graphique sauvegard√©: {output_file}")
        
    def export_results(self, output_file="results.json"):
        """Exporte les r√©sultats en JSON"""
        results = {
            'statistics': self.stats_data,
            'found_keys': self.found_keys,
            'analysis_date': datetime.datetime.now().isoformat(),
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, default=str)
        
        print(f"üíæ R√©sultats export√©s: {output_file}")
    
    def generate_report(self, output_file="report.html"):
        """G√©n√®re un rapport HTML complet"""
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Bitcoin Puzzle Solver - Rapport d'Analyse</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background: linear-gradient(45deg, #f39c12, #e67e22); color: white; padding: 20px; border-radius: 10px; }}
                .section {{ margin: 20px 0; padding: 15px; border-left: 4px solid #3498db; background: #f8f9fa; }}
                .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }}
                .stat-card {{ background: white; padding: 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
                .found-key {{ background: #d4edda; padding: 10px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #28a745; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üöÄ Bitcoin Puzzle Solver - Rapport d'Analyse</h1>
                <p>G√©n√©r√© le: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="section">
                <h2>üìä Statistiques G√©n√©rales</h2>
                <div class="stats">
        """
        
        if self.stats_data:
            df = pd.DataFrame(self.stats_data)
            html_content += f"""
                    <div class="stat-card">
                        <h3>Cl√©s Test√©es</h3>
                        <p><strong>{df['total_keys'].max():,}</strong></p>
                    </div>
                    <div class="stat-card">
                        <h3>Vitesse Moyenne</h3>
                        <p><strong>{df['avg_speed'].mean():.2f}</strong> cl√©s/s</p>
                    </div>
                    <div class="stat-card">
                        <h3>Vitesse Maximale</h3>
                        <p><strong>{df['avg_speed'].max():.2f}</strong> cl√©s/s</p>
                    </div>
                    <div class="stat-card">
                        <h3>Temps d'Ex√©cution</h3>
                        <p><strong>{df['elapsed_seconds'].max()}</strong> secondes</p>
                    </div>
            """
        
        html_content += """
                </div>
            </div>
        """
        
        if self.found_keys:
            html_content += """
            <div class="section">
                <h2>üéâ Cl√©s Trouv√©es</h2>
            """
            for key in self.found_keys:
                html_content += f"""
                <div class="found-key">
                    <h4>Adresse: {key['address']}</h4>
                    <p><strong>WIF:</strong> {key['wif']}</p>
                    <p><strong>D√©cimal:</strong> {key['decimal']}</p>
                </div>
                """
            html_content += "</div>"
        
        html_content += """
        </body>
        </html>
        """
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"üìÑ Rapport HTML g√©n√©r√©: {output_file}")

def main():
    parser = argparse.ArgumentParser(description="Analyseur de Performance Bitcoin Puzzle Solver")
    parser.add_argument('--log', default='solver.log', help='Fichier de log √† analyser')
    parser.add_argument('--output', default='analysis', help='Pr√©fixe des fichiers de sortie')
    parser.add_argument('--graph', action='store_true', help='G√©n√©rer des graphiques')
    parser.add_argument('--report', action='store_true', help='G√©n√©rer un rapport HTML')
    
    args = parser.parse_args()
    
    analyzer = PuzzleSolverAnalyzer()
    
    print("üîç Bitcoin Puzzle Solver - Analyseur de Performance")
    print("=" * 60)
    
    # Essayer de parser diff√©rents types de fichiers
    log_files = [args.log, 'solver.log', 'output.log', 'bitcoin_solver.log']
    parsed = False
    
    for log_file in log_files:
        if Path(log_file).exists():
            if analyzer.parse_log_file(log_file):
                parsed = True
                break
    
    if not parsed:
        print("‚ùå Aucun fichier de log trouv√©. Fichiers recherch√©s:")
        for f in log_files:
            print(f"   - {f}")
        sys.exit(1)
    
    # G√©n√©rer les statistiques
    df = analyzer.generate_statistics()
    
    # Exporter les r√©sultats
    analyzer.export_results(f"{args.output}.json")
    
    # G√©n√©rer les graphiques si demand√©
    if args.graph and df is not None:
        try:
            analyzer.create_performance_graph(df, f"{args.output}_performance.png")
        except ImportError:
            print("‚ö†Ô∏è  matplotlib non install√©. Graphiques non g√©n√©r√©s.")
            print("   Installez avec: pip install matplotlib pandas")
    
    # G√©n√©rer le rapport HTML si demand√©
    if args.report:
        analyzer.generate_report(f"{args.output}_report.html")
    
    print(f"\n‚úÖ Analyse termin√©e!")
    print(f"üìÅ Fichiers g√©n√©r√©s:")
    print(f"   - {args.output}.json")
    if args.graph:
        print(f"   - {args.output}_performance.png")
    if args.report:
        print(f"   - {args.output}_report.html")

if __name__ == "__main__":
    main()